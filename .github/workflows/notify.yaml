name: notify
env:
  BRANCH_NAME: ${{ (github.head_ref && github.head_ref) || (github.ref_name && github.ref_name) }}
run-name: ${{ github.workflow }} (${{ (github.head_ref && github.head_ref) || (github.ref_name && github.ref_name)  }}) [${{ github.event_name }}.${{ github.event.action }}]
on:
  pull_request:
    types:
      - opened
      - edited
      - closed
      - reopened
      - synchronize
  # pull_request_target:
  #    types:
  #    - opened
  #    - edited
  #    - closed
  #    - reopened
  #    - synchronize
  pull_request_review:
  pull_request_review_comment:
  workflow_dispatch:

jobs:
  # pull requestの追加・編集・承認・却下
  pull_request:
    name: PR
    runs-on: ubuntu-latest
    outputs:
      pull_request_message_title: ${{ steps.message_title.outputs.pull_request_message_title }}
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - id: opened
        # pull requestが作成されたとき
        if: ${{ github.event.action == 'opened' }}
        run: echo "message_title=リクエストの追加" >> $GITHUB_ENV

      - name: Assign author to PR
        if: ${{ github.event.action == 'opened' }}
        uses: technote-space/assign-author@v1

      - id: edited-or-synchronize
        # pull requestが編集されたとき
        if: ${{ github.event.action == 'edited' || github.event.action == 'synchronize'}}
        run: echo "message_title=リクエストの内容の編集" >> $GITHUB_ENV

      - id: merged
        # pull requestがcloseされ，かつmargeされたとき
        if: ${{ github.event.action == 'closed' || github.event.pull_request.merged }}
        run: echo "message_title=リクエストの承認・反映" >> $GITHUB_ENV

      - id: closed
        # pull requestがcloseされ，かつmargeされなかったとき
        if: ${{ github.event.action == 'closed' || github.event.pull_request.merged }}
        run: echo "message_title=リクエストの却下" >> $GITHUB_ENV

      - id: message_title
        run: echo "pull_request_message_title=${{ env.message_title }}" >> $GITHUB_OUTPUT

  # pull requestのレビュー
  pull_request_review:
    name: PRレビュー
    runs-on: ubuntu-latest
    outputs:
      pull_request_review_message_title: ${{ steps.message_title.outputs.pull_request_review_message_title }}
    if: ${{ github.event_name == 'pull_request_review' }}
    steps:
      - id: dismissed
        # レビューで無視されたとき
        if: ${{ github.event.action == 'dismissed' }}
        run: echo "message_title=レビューの却下" >> $GITHUB_ENV

      - id: edited
        if: ${{ github.event.action == 'edited' }}
        run: echo "message_title=レビューの編集" >> $GITHUB_ENV

      - id: submitted
        if: ${{ github.event.action == 'submitted' }}
        run: echo "message_title=レビューの送信" >> $GITHUB_ENV

      - id: message_title
        run: echo "pull_request_review_message_title=${{ env.message_title }}" >> $GITHUB_OUTPUT

  # pull request のコメント
  pull_request_review_comment:
    name: PRレビューコメント
    runs-on: ubuntu-latest
    outputs:
      pull_request_review_comment_message_title: ${{ steps.message_title.outputs.pull_request_review_comment_message_title }}
    if: ${{ github.event_name == 'pull_request_review_comment' }}
    steps:
      - id: dismissed
        # レビューで無視されたとき
        if: ${{ github.event.action == 'created' }}
        run: echo "message_title=レビューコメントの投稿" >> $GITHUB_ENV

      - id: edited
        if: ${{ github.event.action == 'edited' }}
        run: echo "message_title=レビューコメントの編集" >> $GITHUB_ENV

      - id: submitted
        if: ${{ github.event.action == 'deleted' }}
        run: echo "message_title=レビューコメントの削除" >> $GITHUB_ENV

      - id: message_title
        run: echo "pull_request_review_comment_message_title=${{ env.message_title }}" >> $GITHUB_OUTPUT

  # タイトルの取得
  get_message_title:
    name: メッセージの送信
    # if: ${{ needs.pull_request.outputs.message_title }}
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - pull_request
      - pull_request_review
      - pull_request_review_comment
    steps:
      - run: |
          M_TITLE="${{ (needs.pull_request.outputs.pull_request_message_title && needs.pull_request.outputs.pull_request_message_title) || (needs.pull_request_review.outputs.pull_request_review_message_title && needs.pull_request_review.outputs.pull_request_review_message_title ) || (needs.pull_request_review_comment.outputs.pull_request_review_comment_message_title && needs.pull_request_review_comment.outputs.pull_request_review_comment_message_title) }}"
          echo "$M_TITLE"
          curl -X POST -H "Content-Type: application/json" -d "{\"type\": \"message\",\"attachments\": [{\"contentType\": \"application/vnd.microsoft.card.adaptive\",\"contentUrl\": null,\"content\": {\"type\":\"AdaptiveCard\",\"body\": [{\"type\": \"TextBlock\",\"text\": \" $M_TITLE oo\",\"wrap\": true}],\"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\"version\": \"1.5\"}}]}"  ${{ secrets.URL}}
  #               ${{ (github.head_ref && github.head_ref) || (github.ref_name && github.ref_name) }}
  #  if: ${{ github.event.action == 'opened' }}

  #   steps:
  #     - name: pull_request and system improvements
  #       if: ${{ github.event_name == 'pull_request' && contains( env.BRANCH_NAME , 'system/') }}
  #       run: echo "message_title=システムの更新がリクエストされました" >> $GITHUB_ENV
  #     - name: pull_request and an article edit
  #       if: ${{ github.event_name == 'pull_request' && contains( env.BRANCH_NAME , 'article/') }}
  #       run: echo "message_title=新規記事の投稿がリクエストされました" >> $GITHUB_ENV
  #     - name: pull_request and other
  #       if: ${{ github.event_name == 'pull_request' && !env.message_title }}
  #       run: echo "message_title=更新がリクエストされました" >> $GITHUB_ENV
  #     - name: return message_title
  #       run: echo "{message_title}=${{ env.message_title }}" >> $GITHUB_OUTPUT
